# • Choose the port and host of each ’server’.
# • Setup the server_names or not.
# • The first server for a host:port will be the default for this host:port (that means it will answer to all the requests that don’t belong to an other server).
# • Setup routes with one or multiple of the following rules/configuration (routes wont be using regexp):
# ◦ Define a directory or a file from where the file should be searched (for example, if url /kapouet is rooted to /tmp/www, url /kapouet/pouic/toto/pouet is /tmp/www/pouic/toto/pouet).
# ◦ Set a default file to answer if the request is a directory.
http {
    # • Setup default error pages.
    server {
        listen 8080;
        server_name "error_page_server";
        error_page 404 /error.html;
        location / {
            root ./html;
            index index.html index.htm;
        }
    }
    # • Limit client body size.
    server {
        listen 8081;
        server_name "limit_body_size_server";
        client_max_body_size 1024;
        location / {
            root ./html;
            index index.html index.htm;
        }
    }
    server {
        listen 8082;
        server_name "limit_body_size_server";
        client_max_body_size 1024;
        location / {
            root ./html;
            index index.html index.htm;
        }
    }
    # ◦ Define a list of accepted HTTP methods for the route.
    server {
        listen 8083;
        server_name "limit_except_server";
        location / {
            limit_except GET {}
            root ./html;
            index index.html index.htm;
        }
    }
    # ◦ Define a HTTP redirection.
    server {
        listen 8084;
        server_name "redirection_server";
        location / {
            return 301 "http://localhost:81";
            root ./html;
            index index.html index.htm;
        }
    }
    # ◦ Turn on or off directory listing.
    server {
        listen 8085;
        server_name "autoindex_server";
        location / {
            autoindex on;
            root ./html;
            index index.html index.htm;
        }
    }
    # ◦ Execute CGI based on certain file extension (for example .php).
    #   ∗ Do you wonder what a CGI is?
    #   ∗ Because you won’t call the CGI directly, use the full path as PATH_INFO.
    #   ∗ Just remember that, for chunked request, your server needs to unchunked it and the CGI will expect EOF as end of the body.
    #   ∗ Same things for the output of the CGI. If no content_length is returned from the CGI, EOF will mark the end of the returned data.
    #   ∗ Your program should call the CGI with the file requested as first argument.
    #   ∗ The CGI should be run in the correct directory for relative path file access.
    #   ∗ Your server should work with one CGI (php-CGI, Python, and so forth).
    server {
        listen 8086;
        server_name "cgi_server";
        location / {
            exec_cgi on;
            root ./html;
            index index.html index.htm;
        }
    }
    # ◦ Make the route able to accept uploaded files and configure where they should be saved.
    server {
        listen 8087;
        server_name "upload_store_server";
        location / {
            exec_cgi on;
            root ./html;
            index index.html index.htm;
        }
    }
}